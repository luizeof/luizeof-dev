<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>luizeof</title>
    <link href="https://luizeof.dev/blog" />
    <link type="application/atom+xml" rel="self" href="https://luizeof.dev/blog/feed.atom" />
    <updated>2020-12-12T22:41:41+00:00</updated>
    <id>https://luizeof.dev/blog/feed.atom</id>
    <author>
        <name>luizeof</name>
    </author>
                <entry>
    <id>https://luizeof.dev/blog/dark-mode-on-flutter-thememode-and-provider</id>
    <link type="text/html" rel="alternate" href="https://luizeof.dev/blog/dark-mode-on-flutter-thememode-and-provider" />
    <title>Dark Mode on Flutter with ThemeMode and Provider</title>
    <published>2020-01-15T00:00:00+00:00</published>
    <updated>2020-01-15T00:00:00+00:00</updated>
    <author>
        <name>luizeof</name>
    </author>
    <summary type="html">In this article I will present a method of implementing dynamic Dark Mode on Flutter using &lt;code&gt;ThemeMode&lt;/code&gt; and the plugin &lt;code&gt;provider&lt;/code&gt;.

There are many ways to apply the dynamic theme to Flutter, but the plugin provider is one of the best......</summary>
    <content type="html"><![CDATA[
        <p>In this article I will present a method of implementing dynamic Dark Mode on Flutter using <code>ThemeMode</code> and the plugin <code>provider</code>.</p>

<p>There are many ways to apply the dynamic theme to <a href="/blog/categories/flutter/">Flutter</a>, but the plugin provider is one of the best and most efficient ways I am using in FluCast.</p>

<p>The plugin provider is a mix between Dependency Injection (DI) and state management, built with widgets for widgets.</p>

<p>It purposely uses widgets for DI / state management instead of Dart classes like Stream. The reason is that widgets are very simple but robust and scalable and for those who use Flutter is more natural.</p>

<p>By using state management widgets, the provider can ensure:</p>

<ul>
<li>Maintenance, through a unidirectional data flow;</li>
<li>Testability / composition, as it is always possible to mock / override a value;</li>
<li>Robustness as it is harder to forget to deal with the upgrade scenario of a model or widget.</li>
</ul>

<p>To read more about the provider, see the <a href="https://pub.dev/packages/provider">documentation</a>.</p>

<h2>Dark Mode Example</h2>

<p>In this example we will use Flutter's native <code>ThemeMode</code> to control the Dark Mode and <strong><em>Light Mode</em></strong> of the app you have in some apps, such as reading apps where <strong><em>Light Mode</em></strong> is for the day and <strong><em>Dark Mode</em></strong> is for the night.</p>

<p>You may also have noticed that Google Maps has the same feature for night and day modes, which turn on and off automatically according to the light. It is an increasingly common resource today.</p>

<p>Add the provider plugin to the pubspec.yaml file:</p>

<pre><code class="language-yaml">dependencies:  
 Flutter:  
   sdk: Flutter  
 provider: ^4.0.1
</code></pre>

<p>Now let's create a new file for implementation of ThemeProvider. I created a file called theme.dart where will be the DynamicDarkMode class:</p>

<pre><code class="language-dart">import 'package:flutter/foundation.dart';

/// Provider para o Dark Mode
class DynamicDarkMode with ChangeNotifier {
  /// Por padrão o App Começa com o modo Light Mode
  /// Você pode configurar um método de persistir o valor de
  /// [_isDarkMode] para que ele seja preservado quando o app for fechado
  bool _isDarkMode = false;

  /// Verifica se o App está em Dark Mode
  get isDarkMode =&gt; this._isDarkMode;

  /// Aplica o Dark Mode
  void setDarkMode() {
    this._isDarkMode = true;
    notifyListeners();
  }

  /// Aplica o Light Mode
  void setLightMode() {
    this._isDarkMode = false;
    notifyListeners();
  }
}
</code></pre>

<p>Now open the main.dart file and deploy ChangeNotifier to the entire application so we can change the theme from anywhere in the application.</p>

<p>Basically you need to change the main () method to look like this:</p>

<pre><code class="language-dart">void main() async =&gt; runApp(
      // Aqui rodamos o app dentro do provider
      ChangeNotifierProvider&lt;DynamicDarkMode&gt;(
        create: (_) =&gt; DynamicDarkMode(),
        child: MyHomePage(),
      ),
    );
</code></pre>

<p>I implemented an option to switch between dark and light mode of the theme. Following is the implementation of programming.</p>

<h2>Reading Provider Data</h2>

<p>The plugin provider offers the Provider.of (context) method that allows us to read our MaterialApp data and can be accessed anywhere:</p>

<pre><code class="language-dart">// Aqui capturamos os dados do nosso ThemeProvider
final themeProvider = Provider.of&lt;DynamicDarkMode&gt;(context);
</code></pre>

<h2>Dark Mode Final Code</h2>

<p>See what the app will look like with the modified main () method and build () reading the provider data.</p>

<p>The sample app is available on github.</p>

<pre><code class="language-dart">import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'theme.dart';

void main() async =&gt; runApp(
      // Aqui rodamos o app dentro do provider
      ChangeNotifierProvider&lt;DynamicDarkMode&gt;(
        create: (_) =&gt; DynamicDarkMode(),
        child: MyHomePage(),
      ),
    );

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() =&gt; _MyHomePageState();
}

class _MyHomePageState extends State&lt;MyHomePage&gt; {
  @override
  Widget build(BuildContext context) {
    // Aqui capturamos os dados do nosso ThemeProvider
    final themeProvider = Provider.of&lt;DynamicDarkMode&gt;(context);
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      // Habilita o suporte ao Dark Mode no MaterialApp
      darkTheme: ThemeData.dark(),
      // Informa o status do Dark Mode ap MaterialApp
      themeMode: themeProvider.isDarkMode ? ThemeMode.dark : ThemeMode.light,
      home: Scaffold(
        appBar: AppBar(
          title: Text(
            themeProvider.isDarkMode
                ? 'Dark Mode Habilitado'
                : 'Light Mode Habilitado',
          ),
          actions: &lt;Widget&gt;[
            // action button
            IconButton(
              icon: Icon(Icons.brightness_4),
              onPressed: () {
                // Aqui alteramos o status do Dark Mode
                // e o Provider se encarrega de avisar ao MaterialApp
                setState(
                  () {
                    themeProvider.isDarkMode
                        // Configura como Light Mode
                        ? themeProvider.setLightMode()
                        // Configura como Dark Mode
                        : themeProvider.setDarkMode();
                  },
                );
              },
            ),
          ],
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: &lt;Widget&gt;[
              Spacer(),
              Text('Texto Padrão'),
              Spacer(),
              Icon(
                Icons.wb_sunny,
                size: 36.0,
              ),
              Spacer(),
              RaisedButton(
                child: Text('RaisedButton Padrão'),
                onPressed: () {},
              ),
              Spacer(),
              Text('Dark Mode Dinâmico'),
              Spacer(),
            ],
          ),
        ),
      ),
    );
  }
}
</code></pre>

<p>Run the project on the device and test the application with the code that is in Github. You can customize the theme as per your requirement.</p>

<p><img src="/assets/img/flutter-light-mode.webp" alt="How to do Dark Mode on Flutter with ThemeMode and Provider" /></p>

<p><img src="/assets/img/flutter-dark-mode.webp" alt="How to do Dark Mode on Flutter with ThemeMode and Provider" /></p>

<h2>Conclusion</h2>

<p>In this article, we learned how to implement the dynamic theme in Flutter using the provider.</p>

<p>This example is basic and easy to understand and you can make it fully customized by implementing other theme properties in the provider file. You can also store theme settings in shared preferences to keep the settings active after closing and reopening the app.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://luizeof.dev/blog/how-to-access-api-with-basic-authentication-in-flutter</id>
    <link type="text/html" rel="alternate" href="https://luizeof.dev/blog/how-to-access-api-with-basic-authentication-in-flutter" />
    <title>How to access API with Basic Authentication in Flutter</title>
    <published>2020-01-02T00:00:00+00:00</published>
    <updated>2020-01-02T00:00:00+00:00</updated>
    <author>
        <name>luizeof</name>
    </author>
    <summary type="html">In Flutter development it is critical to access APIs that have some kind of authentication and the most popular method is Basic Authentication, which basically consists of sending the user and password in a header.

In Flutter we perform HTTP requests......</summary>
    <content type="html"><![CDATA[
        <p>In Flutter development it is critical to access APIs that have some kind of authentication and the most popular method is Basic Authentication, which basically consists of sending the user and password in a header.</p>

<p>In <a href="/blog/categories/flutter/">Flutter</a> we perform HTTP requests through the native Dart package <code>http/http.dart</code> (<a href="https://pub.dev/packages/http">https://pub.dev/packages/http</a>).</p>

<p>This package contains a set of high-level functions and classes that make it easy to consume HTTP resources. It is platform independent and can be used on the command line and in the browser.</p>

<h2>HTTP request in Flutter</h2>

<pre><code class="language-dart">import 'package:http/http.dart' as http;

main() async {

  var response = await http.post(
      'https://api.site.io/new',
      body: {'name': 'doodle', 'color': 'blue'},
  );

  print('Response status: ${response.statusCode}');
  print('Response body: ${response.body}');

}
</code></pre>

<h2>HTTP Request with Basic Authentication in Flutter</h2>

<p>Remembering that Basic Authentication requires that <em>username:password</em> to be <em>Base64</em> encoded, which in Flutter is done through the <code>Base64Encoder</code> class (<a href="https://api.dartlang.org/stable/2.7.0/dart-convert/Base64Encoder-class.html">https://api.dartlang.org/stable/2.7.0/dart-convert/Base64Encoder-class.html</a>).</p>

<p>In the context of an HTTP transaction, Basic Authentication is a method for an HTTP user agent (for example, Flutter) to provide a username and password when making a request.</p>

<p><code>Base64Encoder</code> output is sent with the <code>Authorization: Basic</code> header:</p>

<pre><code>Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l
</code></pre>

<p>Flutter and Dart make it much easier to do this:</p>

<pre><code class="language-dart">import 'dart:convert';
import 'package:http/http.dart';

main() async {

  String username = 'luiz';
  String password = '123';
  String basicAuth = 'Basic ' + base64Encode('$username:$password');

  var response = await http.post(
      'https://api.site.io/new',
      headers: &lt;String, String&gt;{'authorization': basicAuth},
      body: {'name': 'doodle', 'color': 'blue'},
  );

  print('Response status: ${response.statusCode}');
  print('Response body: ${response.body}');

}
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://luizeof.dev/blog/setting-up-flutter-desktop-on-macos</id>
    <link type="text/html" rel="alternate" href="https://luizeof.dev/blog/setting-up-flutter-desktop-on-macos" />
    <title>Setting Up Flutter Desktop on MacOS</title>
    <published>2019-12-26T00:00:00+00:00</published>
    <updated>2019-12-26T00:00:00+00:00</updated>
    <author>
        <name>luizeof</name>
    </author>
    <summary type="html">Work is underway to extend Flutter to support the desktop, allowing developers to build macOS, Windows, and Linux applications with Flutter Desktop.

Flutter 1.3 Alpha currently lets you compile Flutter source code for a native macOS application.......</summary>
    <content type="html"><![CDATA[
        <p>Work is underway to extend <a href="/blog/categories/flutter/">Flutter</a> to support the desktop, allowing developers to build macOS, Windows, and Linux applications with Flutter Desktop.</p>

<p>Flutter 1.3 Alpha currently lets you compile Flutter source code for a native macOS application.</p>

<p>Flutter's desktop support also extends to plugins - you can install existing plugins that support the macOS platform or create your own plugins.</p>

<p><strong>IMPORTANT</strong>: Flutter desktop APIs are still in the early stages of development and are subject to change without notice. No backward compatibility, API or ABI, will be provided by the development team during the Alpha stage.</p>

<p>Expect any code using these libraries to be updated and recompiled after any Flutter update.</p>

<h2>MacOS apps with Flutter</h2>

<p>This is the most advanced desktop platform (for several reasons, including proximity to iOS, which is already supported).</p>

<p>The Objective-C API layer is quite stable at this time, so the latest changes should be rare and you can already test in Flutter SDK 1.3.</p>

<h2>Windows apps with Flutter</h2>

<p>The Windows shell is in the early stages. It is based on Win32, but is expected to exploit UWP support in the future.</p>

<h2>Linux apps with Flutter</h2>

<p>The current Linux shell is a placeholder for GLFW to allow for early experimentation.</p>

<p>The Flutter Team would like to create a library that lets you embed Flutter, regardless of whether you are using GTK +, Qt, wxWidgets, Motif, or another arbitrary toolkit for other parts of the app, but haven't determined a good way to do it yet. .</p>

<p>The current plan is to provide immediate support for GTK + so that it is easy to add support for other toolkits.</p>

<h2>Flutter Desktop Minimum Requirements</h2>

<p>To create a desktop application with Flutter you need the following software:</p>

<ul>
<li>Flutter <a href="https://flutter.dev/docs/development/tools/sdk/releases?tab=macos">SDK 1.3 Alpha or higher for MacOS</a>.</li>
<li>Optional: An IDE that supports Flutter like Android Studio or VS Code.</li>
</ul>

<h2>Configuring the Flutter SDK</h2>

<p>You must be in the master version channel of flutter build and enable the macOS desktop platform feature by typing these commands into Terminal:</p>

<pre><code class="language-bash">flutter channel master
flutter upgrade
flutter config --enable-macos-desktop
</code></pre>

<h2>Running the project with Flutter Desktop</h2>

<p>To run a Desktop project with Flutter you must pass the -d macOS parameter to the compiler:</p>

<pre><code class="language-bash">flutter run -d macOS
</code></pre>

<p>Flutter Desktop mode includes the create and build commands, as well as the run command with debug mode, release mode, profile mode, and hot reload.</p>

<p>In Android Studio you can see MacOS as Device:</p>

<p><img src="/assets/img/flutter-desktop-android-studio.webp" alt="Android Studio" /></p>

<h2>Add desktop to an existing project</h2>

<p>To add desktop support to an existing project, run the following command on a terminal in the project root directory:</p>

<pre><code class="language-bash">flutter create .
</code></pre>

<p>This will update your project with a new macOS directory and create all the necessary configuration files.</p>

<p>Flutter Desktop Plugin Support</p>

<p>Desktop mode supports the use and creation of plugins. To use a macOS compatible plugin, follow the steps for plugins using packages.</p>

<p>Flutter automatically adds the necessary native code to your project, such as iOS or Android.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://luizeof.dev/blog/widgets-flui-flflatbutton-flraisedbutton-e-flgradientbutton</id>
    <link type="text/html" rel="alternate" href="https://luizeof.dev/blog/widgets-flui-flflatbutton-flraisedbutton-e-flgradientbutton" />
    <title>Widgets FLUI FLFlatButton, FLRaisedButton e FLGradientButton</title>
    <published>2019-12-08T00:00:00+00:00</published>
    <updated>2019-12-08T00:00:00+00:00</updated>
    <author>
        <name>luizeof</name>
    </author>
    <summary type="html">Os Widgets e botões do FLUI FLFlatButton e FLRaisedButton incluem alguns widgets baseados no &lt;code&gt;FlatButton&lt;/code&gt; &amp;amp; &lt;code&gt;RaisedButton&lt;/code&gt; nativos do Flutter e também adicionaram &lt;code&gt;FLGradientButton&lt;/code&gt;, que oferece suporte ao fundo......</summary>
    <content type="html"><![CDATA[
        <p>Os Widgets e botões do FLUI <strong>FLFlatButton</strong> e <strong>FLRaisedButton</strong> incluem alguns widgets baseados no <code>FlatButton</code> &amp; <code>RaisedButton</code> nativos do Flutter e também adicionaram <code>FLGradientButton</code>, que oferece suporte ao fundo gradiente e o <code>FLLoadingButton</code>, que suporta animação de carregamento.</p>

<blockquote>
  <p>O FLUI é um kit de widgets Open Source para o <a href="/blog/categories/flutter/">Flutter</a> que possui muitos widgets de interface do usuário de alta qualidade, fornecendo recursos e funções mais avançados para melhorar a eficiência do desenvolvimento.</p>
</blockquote>

<p>Os widgets são compatíveis com MaterialApp e não estilizados suportam a personalização de estilos para atender a diferentes necessidades de interface. Você pode acompanhar o desenvolvimento do FLUI no <a href="https://github.com/Rannie/flui/">repositório oficial do Github.</a></p>

<h2>Widget FLFlatButton</h2>

<p>O <code>FLFlatButton</code> é baseado no <code>FlatButton</code> nativo do Flutter e possui uma nova propriedade <code>expanded</code> e uma propriedade opcional <code>icon</code> para especificar onde o ícone está localizado no botão.</p>

<p>Use <code>FLFlatButton</code> nas barras de ferramentas, nas caixas de diálogo ou alinhados com outro conteúdo, mas desloque esse conteúdo com preenchimento para que a presença do botão seja óbvia.</p>

<p>Os <code>FLFlatButton</code> intencionalmente não possuem bordas visíveis e, portanto, devem confiar em sua posição em relação a outro conteúdo para o contexto.</p>

<p>É interessante usar uma cor de fundo nos <code>FLFlatButton</code> usando a propriedade <code>color</code> e a cor de texto com a propriedade <code>textColor</code>.</p>

<p>Nos diálogos e cartões, eles devem ser agrupados em um dos cantos inferiores. Evite usar <code>FLFlatButton</code> onde eles se misturam com outro conteúdo, por exemplo, no meio das listas pois podem atrapalhar a interação do usuário.</p>

<h2>FLFlatButton com a opção <em>expanded</em></h2>

<pre><code class="language-dart">FLFlatButton(
    expanded: true,
    color: Color(0xFF0F4C81),
    textColor: Colors.white,
    child: Text('Botão com Expanded', textAlign: TextAlign.center),
    onPressed: () =&gt; print('on click'),
),
</code></pre>

<p><img src="/assets/img/FLFlatButton-expanded.webp" alt="Widget FLFlatButton" /></p>

<h2><em>FLFlatButton</em> com a opção de <em>icon</em></h2>

<pre><code class="language-dart">FLFlatButton.icon(
    padding: const EdgeInsets.all(5),
    textColor: Color(0xFF0F4C81),
    onPressed: () =&gt; print('on click'),
    icon: Icon(Icons.account_box, color: mainColor),
    label: Text('Botão com Ícone'),
    spacing: 5,
    iconPosition: FLPosition.right,
),
</code></pre>

<p><img src="/assets/img/FLFlatButton-icon.webp" alt="FLFlatButton com a opção de icon" /></p>

<h2>Widget <em>FLRaisedButton</em></h2>

<p>O <code>FLRaisedButton</code> é baseado no <code>RaisedButton</code>, mas também adiciona <code>expanded</code> e <code>icon</code>. O uso é o mesmo que <code>FLFlatButton</code>.</p>

<h2>Widget <em>FLGradientButton</em></h2>

<p><code>FLGradientButton</code> suporta planos de fundo gradientes. Existem três métodos para exibir diferentes tipos de gradientes: <em>linear</em>, <em>sweep</em> e <em>radial</em>.</p>

<h2>Widget <em>FLGradientButton.linear</em></h2>

<pre><code class="language-dart">FLGradientButton.linear(
    textColor: Colors.white,
    child: Text('Linear Gradient Button'),
    colors: [Colors.lightBlueAccent, Color(0xFF0F4C81)],
    onPressed: () =&gt; print('on click'),
),
</code></pre>

<p><img src="/assets/img/FLGradientButton.linear.webp" alt="Widget FLFlatButton FLGradientButton linear" /></p>

<h2>Widget <em>FLGradientButton.sweep</em></h2>

<pre><code class="language-dart">FLGradientButton.sweep(
    padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 20),
    center: FractionalOffset.center,
    startAngle: 0.0,
    endAngle: math.pi * 2,
    colors: const &lt;Color&gt;[
        Color(0xFF4285F4), // blue
        Color(0xFF34A853), // green
        Color(0xFFFBBC05), // yellow
        Color(0xFFEA4335), // red
        Color(0xFF4285F4), // blue
    ],
    stops: const &lt;double&gt;[0.0, 0.25, 0.5, 0.75, 1.0],
    textColor: Colors.white,
    child: Text('Sweep Gradient Button'),
    onPressed: () =&gt; print('on click'),
),
</code></pre>

<p><img src="/assets/img/FLGradientButton.sweep_.webp" alt="Widget FLFlatButton FLGradientButton sweep" /></p>

<h2>Widget <em>FLGradientButton.radial</em></h2>

<pre><code class="language-dart">FLGradientButton.radial(
    padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 20),
    center: const Alignment(0.7, -0.6),
    radius: 0.2,
    colors: [
        const Color(0xFFFFFF00), // yellow sun
        const Color(0xFF0099FF), // blue sky
    ],
    stops: [0.4, 1.0],
    textColor: Colors.white,
    child: Text('Radial Gradient Button'),
    onPressed: () =&gt; print('on click'),
),
</code></pre>

<p><img src="/assets/img/FLGradientButton.radial.webp" alt="Widget FLGradientButton radial" /></p>

<h2>Widget <em>FLLoadingButton</em></h2>

<p><code>FLLoadingButton</code> controla se o indicador deve ser exibido definindo a propriedade <code>loading</code>. Ele também fornece propriedades para estilizar o indicador.</p>

<pre><code class="language-dart">FLLoadingButton(
    child: Text('Login'),
    color: Color(0xFF0F4C81),
    disabledColor: Color(0xFF0F4C81),
    indicatorColor: Colors.white,
    disabledTextColor: Colors.grey.withAlpha(40),
    textColor: Colors.white,
    loading: _loading,
    minWidth: 200,
    onPressed: () {
        setState(() =&gt; _loading = true);
        Future.delayed(Duration(seconds: 3), () =&gt; setState(() =&gt; _loading = false));
    },
),
</code></pre>

<p><img src="/assets/img/FLLoadingButton.gif" alt="Widget FLLoadingButton" /></p>

<h2>Finalizando</h2>

<p>A documentação do FLFlatButton está disponível em <a href="https://www.flui.xin/en/widgets/button.html">https://www.flui.xin/en/widgets/button.html</a></p>
    ]]></content>
</entry>
            <entry>
    <id>https://luizeof.dev/blog/how-to-convert-data-in-flutter-and-dart</id>
    <link type="text/html" rel="alternate" href="https://luizeof.dev/blog/how-to-convert-data-in-flutter-and-dart" />
    <title>How to convert data in Flutter and Dart</title>
    <published>2019-12-05T00:00:00+00:00</published>
    <updated>2019-12-05T00:00:00+00:00</updated>
    <author>
        <name>luizeof</name>
    </author>
    <summary type="html">During development it is common to convert data from one type to another to perform the most diverse operations and Dart offers a number of methods to perform the conversions within Flutter.





The &lt;code&gt;int.parse&lt;/code&gt; method parses the source as an......</summary>
    <content type="html"><![CDATA[
        <p>During development it is common to convert data from one type to another to perform the most diverse operations and Dart offers a number of methods to perform the conversions within <a href="/blog/categories/flutter/">Flutter</a>.</p>

<h2>Convert String to Int</h2>

<pre><code class="language-dart">var strtoint = int.parse("999");
</code></pre>

<p>The <code>int.parse</code> method parses the source as an <code>integer</code> literal and returns the value.</p>

<p>The source must be a non-empty sequence of base base digits, optionally prefixed with a minus or plus sign (‘-‘ or ‘+’). Must not be null.</p>

<p>If the source <code>String</code> does not contain a valid <code>integer</code> literal, optionally prefixed by a sign, a <code>FormatException</code> is thrown.</p>

<h2>Convert String to double</h2>

<pre><code class="language-dart">var strtodouble = double.parse('1.1');
</code></pre>

<p>The <code>double.parse()</code> method accepts an optional sign (+ or -) followed by the characters "<code>Infinity</code>", "<code>NaN</code>" or a floating point representation.</p>

<p>A floating point representation is composed of a mantissa and an optional part of the exponent.</p>

<p>The mantissa is a decimal point (.) Followed by a sequence of digits (decimals) or a sequence of digits optionally followed by a decimal point and optionally more digits.</p>

<p>The exponent (optional) part consists of the character “e” or “E“, an optional sign and one or more digits. <code>String</code> must not be <code>null</code>. Leading and trailing whitespaces are ignored.</p>

<p>If the source <code>String</code> is not a valid double literal, then <code>onError</code> is called with the source as an argument and its return value will be used. If no <code>onError</code> is provided, a <code>FormatException</code> is thrown.</p>

<h2>Convert int to String</h2>

<p>Dart offers a special method called <code>toString()</code> to convert <code>integer</code> to <code>String</code>.</p>

<pre><code class="language-dart">String inttostr = 1.toString ();
</code></pre>

<p>i<code>nt.toString()</code> returns the representation of an <code>integer</code> numeric literal.</p>

<h2>Convert double to String</h2>

<p>Dart offers a special method called <code>toString()</code> to convert <code>double</code> numbers to <code>String</code>.</p>

<pre><code class="language-dart">String doubletostr = 1.9.toString();
</code></pre>

<p><code>double.toString()</code> returns the representation of a numeric literal, so that the <code>double</code> value closest to the mathematical value of the representation is this <code>double</code>.</p>
    ]]></content>
</entry>
    </feed>
